//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ashray
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AshrayEntities : DbContext
    {
        public AshrayEntities()
            : base("name=AshrayEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CentreRegistration> CentreRegistrations { get; set; }
        public virtual DbSet<LocationDetail> LocationDetails { get; set; }
        public virtual DbSet<PatientInfo> PatientInfoes { get; set; }
        public virtual DbSet<RoleDetail> RoleDetails { get; set; }
        public virtual DbSet<StateDetail> StateDetails { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<PatientHistory> PatientHistories { get; set; }
    
        public virtual int USPInsertUpdateCentreRegistration(string centreName, string contactPerson, string mobileNumber, string email, Nullable<int> bedCount, Nullable<int> locationId, Nullable<int> stateId, string password)
        {
            var centreNameParameter = centreName != null ?
                new ObjectParameter("CentreName", centreName) :
                new ObjectParameter("CentreName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var bedCountParameter = bedCount.HasValue ?
                new ObjectParameter("BedCount", bedCount) :
                new ObjectParameter("BedCount", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPInsertUpdateCentreRegistration", centreNameParameter, contactPersonParameter, mobileNumberParameter, emailParameter, bedCountParameter, locationIdParameter, stateIdParameter, passwordParameter);
        }
    
        public virtual int USPInsertUpdatePatientInfo(string patientName, string rTPCRTestNumber, string testResult, string govtIdNumber, string patientAddress, string gender, string emergencyContactName1, string emergencyContactNumber1, string emergencyContactName2, string emergencyContactNumber2, Nullable<int> centreId, string patientPhoneNumber, string emergencyContactRelationShip1, string emergencyContactRelationShip2, Nullable<System.DateTime> rTPCRTestDate)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var rTPCRTestNumberParameter = rTPCRTestNumber != null ?
                new ObjectParameter("RTPCRTestNumber", rTPCRTestNumber) :
                new ObjectParameter("RTPCRTestNumber", typeof(string));
    
            var testResultParameter = testResult != null ?
                new ObjectParameter("TestResult", testResult) :
                new ObjectParameter("TestResult", typeof(string));
    
            var govtIdNumberParameter = govtIdNumber != null ?
                new ObjectParameter("GovtIdNumber", govtIdNumber) :
                new ObjectParameter("GovtIdNumber", typeof(string));
    
            var patientAddressParameter = patientAddress != null ?
                new ObjectParameter("PatientAddress", patientAddress) :
                new ObjectParameter("PatientAddress", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emergencyContactName1Parameter = emergencyContactName1 != null ?
                new ObjectParameter("EmergencyContactName1", emergencyContactName1) :
                new ObjectParameter("EmergencyContactName1", typeof(string));
    
            var emergencyContactNumber1Parameter = emergencyContactNumber1 != null ?
                new ObjectParameter("EmergencyContactNumber1", emergencyContactNumber1) :
                new ObjectParameter("EmergencyContactNumber1", typeof(string));
    
            var emergencyContactName2Parameter = emergencyContactName2 != null ?
                new ObjectParameter("EmergencyContactName2", emergencyContactName2) :
                new ObjectParameter("EmergencyContactName2", typeof(string));
    
            var emergencyContactNumber2Parameter = emergencyContactNumber2 != null ?
                new ObjectParameter("EmergencyContactNumber2", emergencyContactNumber2) :
                new ObjectParameter("EmergencyContactNumber2", typeof(string));
    
            var centreIdParameter = centreId.HasValue ?
                new ObjectParameter("CentreId", centreId) :
                new ObjectParameter("CentreId", typeof(int));
    
            var patientPhoneNumberParameter = patientPhoneNumber != null ?
                new ObjectParameter("PatientPhoneNumber", patientPhoneNumber) :
                new ObjectParameter("PatientPhoneNumber", typeof(string));
    
            var emergencyContactRelationShip1Parameter = emergencyContactRelationShip1 != null ?
                new ObjectParameter("EmergencyContactRelationShip1", emergencyContactRelationShip1) :
                new ObjectParameter("EmergencyContactRelationShip1", typeof(string));
    
            var emergencyContactRelationShip2Parameter = emergencyContactRelationShip2 != null ?
                new ObjectParameter("EmergencyContactRelationShip2", emergencyContactRelationShip2) :
                new ObjectParameter("EmergencyContactRelationShip2", typeof(string));
    
            var rTPCRTestDateParameter = rTPCRTestDate.HasValue ?
                new ObjectParameter("RTPCRTestDate", rTPCRTestDate) :
                new ObjectParameter("RTPCRTestDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPInsertUpdatePatientInfo", patientNameParameter, rTPCRTestNumberParameter, testResultParameter, govtIdNumberParameter, patientAddressParameter, genderParameter, emergencyContactName1Parameter, emergencyContactNumber1Parameter, emergencyContactName2Parameter, emergencyContactNumber2Parameter, centreIdParameter, patientPhoneNumberParameter, emergencyContactRelationShip1Parameter, emergencyContactRelationShip2Parameter, rTPCRTestDateParameter);
        }
    
        public virtual ObjectResult<USPBedAvailabilityDashboardInfo_Result> USPBedAvailabilityDashboardInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPBedAvailabilityDashboardInfo_Result>("USPBedAvailabilityDashboardInfo");
        }
    
        public virtual int USPInsertPatientHistory(Nullable<int> patientId, Nullable<System.DateTime> checkinDateTime, Nullable<System.DateTime> checkoutDatetime, string dischargeInfo, string patientDocumentPath, string roomNumber, string bedNumber, string bP, string sPO2, string temperature)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            var checkinDateTimeParameter = checkinDateTime.HasValue ?
                new ObjectParameter("CheckinDateTime", checkinDateTime) :
                new ObjectParameter("CheckinDateTime", typeof(System.DateTime));
    
            var checkoutDatetimeParameter = checkoutDatetime.HasValue ?
                new ObjectParameter("CheckoutDatetime", checkoutDatetime) :
                new ObjectParameter("CheckoutDatetime", typeof(System.DateTime));
    
            var dischargeInfoParameter = dischargeInfo != null ?
                new ObjectParameter("DischargeInfo", dischargeInfo) :
                new ObjectParameter("DischargeInfo", typeof(string));
    
            var patientDocumentPathParameter = patientDocumentPath != null ?
                new ObjectParameter("PatientDocumentPath", patientDocumentPath) :
                new ObjectParameter("PatientDocumentPath", typeof(string));
    
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(string));
    
            var bedNumberParameter = bedNumber != null ?
                new ObjectParameter("BedNumber", bedNumber) :
                new ObjectParameter("BedNumber", typeof(string));
    
            var bPParameter = bP != null ?
                new ObjectParameter("BP", bP) :
                new ObjectParameter("BP", typeof(string));
    
            var sPO2Parameter = sPO2 != null ?
                new ObjectParameter("SPO2", sPO2) :
                new ObjectParameter("SPO2", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPInsertPatientHistory", patientIdParameter, checkinDateTimeParameter, checkoutDatetimeParameter, dischargeInfoParameter, patientDocumentPathParameter, roomNumberParameter, bedNumberParameter, bPParameter, sPO2Parameter, temperatureParameter);
        }
    
        public virtual ObjectResult<USPBedAvailabilityHomeDashboardInfo_Result> USPBedAvailabilityHomeDashboardInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPBedAvailabilityHomeDashboardInfo_Result>("USPBedAvailabilityHomeDashboardInfo");
        }
    
        public virtual int USPDeletePatientInfo(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPDeletePatientInfo", patientIdParameter);
        }
    
        public virtual int USPGetBedTypeInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPGetBedTypeInfo");
        }
    
        public virtual ObjectResult<USPGetPatientHistory_Result> USPGetPatientHistory(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPGetPatientHistory_Result>("USPGetPatientHistory", patientIdParameter);
        }
    
        public virtual ObjectResult<USPGetPostHospitalInfo_Result> USPGetPostHospitalInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPGetPostHospitalInfo_Result>("USPGetPostHospitalInfo");
        }
    
        public virtual ObjectResult<USPValidateLoginInfo_Result> USPValidateLoginInfo(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPValidateLoginInfo_Result>("USPValidateLoginInfo", emailParameter, passwordParameter);
        }
    }
}
